version: 2.1

orbs:
  slack: circleci/slack@4.5.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  notify_slack_error:
    steps:
      - slack/notify:
          channel: '#test'
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          channel: '#test'
          event: pass
          template: basic_success_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
      - notify_slack_pass

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test front-end
      # Your job code here
          command: |
              cd frontend
              npm install
              npm run test
      - notify_slack_error
      - notify_slack_pass

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [test-backend]
      # Your job code here
      - run:
          name: Test back-end
          command: |
              cd backend
              npm install
              npm run test
      - notify_slack_error
      - notify_slack_pass

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]
      # Your job code here
      - run:
          name: Scan front-end
          command: |
              cd frontend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
              npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-backend]
      # Your job code here
      - run:
          name: Scan back-end
          command: |
              cd backend
              npm install
              # npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical --force
              # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
              npm audit fix --force
              npm audit --audit-level=critical
      - notify_slack_error
      - notify_slack_pass

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - restore_cache:
          keys: [infrastructure-deploy]
      - run:
          name: Install tar and zip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum -y install tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddresses' \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
#      - destroy-infrastructure:
#          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#          event: on_fail

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: ansible/ansible
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "e4:b0:ce:d2:c4:52:9f:c9:e6:a9:a8:71:d4:37:74:42"
      # attach workspace
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # exit 1
            apt get update
      - run:
          name: Configure server
          command: |
            # Your code here
            # exit 1
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend, test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-ingrastructure:
          requires: [deploy-infrastructure]
#      - destroy-infrastructure:
#          requires: [deploy-infrastructure]

